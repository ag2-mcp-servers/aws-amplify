# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T09:32:19+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, ConfigDict, Field, RootModel, SecretStr, conint, constr


class AccessToken(RootModel[SecretStr]):
    root: SecretStr


class ActiveJobId(RootModel[constr(max_length=1000)]):
    root: constr(max_length=1000)


class AppArn(RootModel[constr(max_length=1000)]):
    root: constr(max_length=1000)


class AppId(RootModel[constr(pattern=r'd[a-z0-9]+', min_length=1, max_length=20)]):
    root: constr(pattern=r'd[a-z0-9]+', min_length=1, max_length=20)


class ArtifactFileName(RootModel[constr(max_length=1000)]):
    root: constr(max_length=1000)


class ArtifactId(RootModel[constr(pattern=r'\(\?s\).*', max_length=255)]):
    root: constr(pattern=r'\(\?s\).*', max_length=255)


class ArtifactUrl(RootModel[constr(max_length=1000)]):
    root: constr(max_length=1000)


class ArtifactsUrl(RootModel[constr(max_length=1000)]):
    root: constr(max_length=1000)


class AssociatedResource(RootModel[constr(min_length=1, max_length=2048)]):
    root: constr(min_length=1, max_length=2048)


class AssociatedResources(RootModel[List[AssociatedResource]]):
    root: List[AssociatedResource]


class AutoBranchCreationPattern(
    RootModel[constr(pattern=r'\(\?s\).\+', min_length=1, max_length=2048)]
):
    root: constr(pattern=r'\(\?s\).\+', min_length=1, max_length=2048)


class AutoBranchCreationPatterns(RootModel[List[AutoBranchCreationPattern]]):
    root: List[AutoBranchCreationPattern]


class AutoSubDomainCreationPattern(
    RootModel[constr(pattern=r'\(\?s\).\+', min_length=1, max_length=2048)]
):
    root: constr(pattern=r'\(\?s\).\+', min_length=1, max_length=2048)


class AutoSubDomainCreationPatterns(RootModel[List[AutoSubDomainCreationPattern]]):
    root: List[AutoSubDomainCreationPattern]


class AutoSubDomainIAMRole(
    RootModel[constr(pattern=r'^$|^arn:aws:iam::\d{12}:role.+', max_length=1000)]
):
    root: constr(pattern=r'^$|^arn:aws:iam::\d{12}:role.+', max_length=1000)


class BackendEnvironmentArn(
    RootModel[constr(pattern=r'\(\?s\).*', min_length=0, max_length=1000)]
):
    root: constr(pattern=r'\(\?s\).*', min_length=0, max_length=1000)


class BadRequestException(RootModel[Any]):
    root: Any


class BasicAuthCredentials(RootModel[SecretStr]):
    root: SecretStr


class BranchArn(RootModel[constr(pattern=r'\(\?s\).*', max_length=1000)]):
    root: constr(pattern=r'\(\?s\).*', max_length=1000)


class BranchName(
    RootModel[constr(pattern=r'\(\?s\).\+', min_length=1, max_length=255)]
):
    root: constr(pattern=r'\(\?s\).\+', min_length=1, max_length=255)


class BuildSpec(RootModel[SecretStr]):
    root: SecretStr = Field(
        ...,
        description=' The build specification (build spec) file for an Amplify app build. ',
    )


class CertificateVerificationDNSRecord(RootModel[constr(max_length=1000)]):
    root: constr(max_length=1000)


class CommitId(RootModel[constr(pattern=r'\(\?s\).*', max_length=255)]):
    root: constr(pattern=r'\(\?s\).*', max_length=255)


class CommitMessage(RootModel[constr(pattern=r'\(\?s\).*', max_length=10000)]):
    root: constr(pattern=r'\(\?s\).*', max_length=10000)


class CommitTime(RootModel[datetime]):
    root: datetime


class Condition(RootModel[constr(pattern=r'\(\?s\).*', min_length=0, max_length=2048)]):
    root: constr(pattern=r'\(\?s\).*', min_length=0, max_length=2048)


class Context(RootModel[str]):
    root: str


class CreateTime(RootModel[datetime]):
    root: datetime


class CustomDomain(RootModel[constr(max_length=255)]):
    root: constr(max_length=255)


class CustomDomains(RootModel[List[CustomDomain]]):
    root: List[CustomDomain] = Field(..., max_length=255)


class CustomHeaders(
    RootModel[constr(pattern=r'\(\?s\).*', min_length=0, max_length=25000)]
):
    root: constr(pattern=r'\(\?s\).*', min_length=0, max_length=25000)


class DNSRecord(RootModel[constr(max_length=1000)]):
    root: constr(max_length=1000)


class DefaultDomain(RootModel[constr(min_length=1, max_length=1000)]):
    root: constr(min_length=1, max_length=1000)


class DeleteAppRequest(BaseModel):
    pass


class DeleteBackendEnvironmentRequest(BaseModel):
    pass


class DeleteBranchRequest(BaseModel):
    pass


class DeleteDomainAssociationRequest(BaseModel):
    pass


class DeleteJobRequest(BaseModel):
    pass


class DeleteWebhookRequest(BaseModel):
    pass


class DependentServiceFailureException(RootModel[Any]):
    root: Any


class DeploymentArtifacts(
    RootModel[constr(pattern=r'\(\?s\).\+', min_length=1, max_length=1000)]
):
    root: constr(pattern=r'\(\?s\).\+', min_length=1, max_length=1000)


class Description(RootModel[constr(pattern=r'\(\?s\).*', max_length=1000)]):
    root: constr(pattern=r'\(\?s\).*', max_length=1000)


class DisplayName(RootModel[constr(pattern=r'\(\?s\).*', max_length=255)]):
    root: constr(pattern=r'\(\?s\).*', max_length=255)


class DomainAssociationArn(RootModel[constr(max_length=1000)]):
    root: constr(max_length=1000)


class DomainName(
    RootModel[
        constr(
            pattern=r'^(((?!-)[A-Za-z0-9-]{0,62}[A-Za-z0-9])\.)+((?!-)[A-Za-z0-9-]{1,62}[A-Za-z0-9])(\.)?$',
            max_length=64,
        )
    ]
):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(
        pattern=r'^(((?!-)[A-Za-z0-9-]{0,62}[A-Za-z0-9])\.)+((?!-)[A-Za-z0-9-]{1,62}[A-Za-z0-9])(\.)?$',
        max_length=64,
    )


class DomainPrefix(RootModel[constr(pattern=r'\(\?s\).*', max_length=255)]):
    root: constr(pattern=r'\(\?s\).*', max_length=255)


class DomainStatus(Enum):
    PENDING_VERIFICATION = 'PENDING_VERIFICATION'
    IN_PROGRESS = 'IN_PROGRESS'
    AVAILABLE = 'AVAILABLE'
    PENDING_DEPLOYMENT = 'PENDING_DEPLOYMENT'
    FAILED = 'FAILED'
    CREATING = 'CREATING'
    REQUESTING_CERTIFICATE = 'REQUESTING_CERTIFICATE'
    UPDATING = 'UPDATING'


class EnableAutoBranchCreation(RootModel[bool]):
    root: bool


class EnableAutoBuild(RootModel[bool]):
    root: bool


class EnableAutoSubDomain(RootModel[bool]):
    root: bool


class EnableBasicAuth(RootModel[bool]):
    root: bool


class EnableBranchAutoBuild(RootModel[bool]):
    root: bool


class EnableBranchAutoDeletion(RootModel[bool]):
    root: bool


class EnableNotification(RootModel[bool]):
    root: bool


class EnablePerformanceMode(RootModel[bool]):
    root: bool


class EnablePullRequestPreview(RootModel[bool]):
    root: bool


class EndTime(RootModel[datetime]):
    root: datetime


class EnvKey(RootModel[constr(pattern=r'\(\?s\).*', max_length=255)]):
    root: constr(pattern=r'\(\?s\).*', max_length=255)


class EnvValue(RootModel[constr(pattern=r'\(\?s\).*', max_length=5500)]):
    root: constr(pattern=r'\(\?s\).*', max_length=5500)


class EnvironmentName(
    RootModel[constr(pattern=r'\(\?s\).\+', min_length=1, max_length=255)]
):
    root: constr(pattern=r'\(\?s\).\+', min_length=1, max_length=255)


class EnvironmentVariables(RootModel[Optional[Dict[str, EnvValue]]]):
    root: Optional[Dict[str, EnvValue]] = None


class FileName(RootModel[constr(pattern=r'\(\?s\).*', max_length=255)]):
    root: constr(pattern=r'\(\?s\).*', max_length=255)


class Framework(RootModel[constr(pattern=r'\(\?s\).*', max_length=255)]):
    root: constr(pattern=r'\(\?s\).*', max_length=255)


class GetAppRequest(BaseModel):
    pass


class GetArtifactUrlRequest(BaseModel):
    pass


class GetArtifactUrlResult(BaseModel):
    artifactId: ArtifactId
    artifactUrl: ArtifactUrl


class GetBackendEnvironmentRequest(BaseModel):
    pass


class GetBranchRequest(BaseModel):
    pass


class GetDomainAssociationRequest(BaseModel):
    pass


class GetJobRequest(BaseModel):
    pass


class GetWebhookRequest(BaseModel):
    pass


class InternalFailureException(RootModel[Any]):
    root: Any


class JobArn(RootModel[constr(max_length=1000)]):
    root: constr(max_length=1000)


class JobId(RootModel[constr(pattern=r'[0-9]+', max_length=255)]):
    root: constr(pattern=r'[0-9]+', max_length=255)


class JobReason(RootModel[constr(pattern=r'\(\?s\).*', max_length=255)]):
    root: constr(pattern=r'\(\?s\).*', max_length=255)


class JobStatus(Enum):
    PENDING = 'PENDING'
    PROVISIONING = 'PROVISIONING'
    RUNNING = 'RUNNING'
    FAILED = 'FAILED'
    SUCCEED = 'SUCCEED'
    CANCELLING = 'CANCELLING'
    CANCELLED = 'CANCELLED'


class JobType(Enum):
    RELEASE = 'RELEASE'
    RETRY = 'RETRY'
    MANUAL = 'MANUAL'
    WEB_HOOK = 'WEB_HOOK'


class LastDeployTime(RootModel[datetime]):
    root: datetime


class LimitExceededException(RootModel[Any]):
    root: Any


class ListAppsRequest(BaseModel):
    pass


class ListArtifactsRequest(BaseModel):
    pass


class ListBackendEnvironmentsRequest(BaseModel):
    pass


class ListBranchesRequest(BaseModel):
    pass


class ListDomainAssociationsRequest(BaseModel):
    pass


class ListJobsRequest(BaseModel):
    pass


class ListTagsForResourceRequest(BaseModel):
    pass


class ListWebhooksRequest(BaseModel):
    pass


class LogUrl(RootModel[constr(max_length=1000)]):
    root: constr(max_length=1000)


class MD5Hash(RootModel[constr(pattern=r'\(\?s\).*', max_length=32)]):
    root: constr(pattern=r'\(\?s\).*', max_length=32)


class MaxResults(RootModel[conint(ge=0, le=100)]):
    root: conint(ge=0, le=100)


class Name(RootModel[constr(pattern=r'\(\?s\).\+', min_length=1, max_length=255)]):
    root: constr(pattern=r'\(\?s\).\+', min_length=1, max_length=255)


class NextToken(RootModel[constr(pattern=r'\(\?s\).*', max_length=2000)]):
    root: constr(pattern=r'\(\?s\).*', max_length=2000)


class NotFoundException(RootModel[Any]):
    root: Any


class OauthToken(RootModel[SecretStr]):
    root: SecretStr


class Platform(Enum):
    WEB = 'WEB'
    WEB_DYNAMIC = 'WEB_DYNAMIC'
    WEB_COMPUTE = 'WEB_COMPUTE'


class PullRequestEnvironmentName(
    RootModel[constr(pattern=r'\(\?s\).*', max_length=20)]
):
    root: constr(pattern=r'\(\?s\).*', max_length=20)


class Repository(RootModel[constr(pattern=r'\(\?s\).*', max_length=1000)]):
    root: constr(pattern=r'\(\?s\).*', max_length=1000)


class RepositoryCloneMethod(Enum):
    SSH = 'SSH'
    TOKEN = 'TOKEN'
    SIGV4 = 'SIGV4'


class ResourceArn(
    RootModel[constr(pattern=r'^arn:aws:amplify:.*', min_length=0, max_length=2048)]
):
    root: constr(pattern=r'^arn:aws:amplify:.*', min_length=0, max_length=2048)


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class ServiceRoleArn(
    RootModel[constr(pattern=r'\(\?s\).*', min_length=0, max_length=1000)]
):
    root: constr(pattern=r'\(\?s\).*', min_length=0, max_length=1000)


class Source(RootModel[constr(pattern=r'\(\?s\).\+', min_length=1, max_length=2048)]):
    root: constr(pattern=r'\(\?s\).\+', min_length=1, max_length=2048)


class SourceUrl(RootModel[constr(pattern=r'\(\?s\).*', max_length=3000)]):
    root: constr(pattern=r'\(\?s\).*', max_length=3000)


class StackName(RootModel[constr(pattern=r'\(\?s\).\+', min_length=1, max_length=255)]):
    root: constr(pattern=r'\(\?s\).\+', min_length=1, max_length=255)


class Stage(Enum):
    PRODUCTION = 'PRODUCTION'
    BETA = 'BETA'
    DEVELOPMENT = 'DEVELOPMENT'
    EXPERIMENTAL = 'EXPERIMENTAL'
    PULL_REQUEST = 'PULL_REQUEST'


class StartDeploymentRequest(BaseModel):
    jobId: Optional[JobId] = None
    sourceUrl: Optional[SourceUrl] = None


class StartJobRequest(BaseModel):
    commitId: Optional[CommitId] = None
    commitMessage: Optional[CommitMessage] = None
    commitTime: Optional[CommitTime] = None
    jobId: Optional[JobId] = None
    jobReason: Optional[JobReason] = None
    jobType: JobType


class StartTime(RootModel[datetime]):
    root: datetime


class Status(RootModel[constr(pattern=r'.{3,7}', min_length=3, max_length=7)]):
    root: constr(pattern=r'.{3,7}', min_length=3, max_length=7)


class StatusReason(RootModel[constr(max_length=1000)]):
    root: constr(max_length=1000)


class StepName(RootModel[constr(max_length=255)]):
    root: constr(max_length=255)


class StopJobRequest(BaseModel):
    pass


class SubDomainSetting(BaseModel):
    branchName: BranchName
    prefix: DomainPrefix


class SubDomainSettings(RootModel[List[SubDomainSetting]]):
    root: List[SubDomainSetting] = Field(..., max_length=500)


class TTL(RootModel[constr(pattern=r'\d*', min_length=0, max_length=32)]):
    root: constr(pattern=r'\d*', min_length=0, max_length=32) = Field(
        ..., description=' The content Time to Live (TTL) for the website in seconds. '
    )


class TagKey(
    RootModel[
        constr(pattern=r'^(?!aws:)[a-zA-Z+-=._:/]+$', min_length=1, max_length=128)
    ]
):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(pattern=r'^(?!aws:)[a-zA-Z+-=._:/]+$', min_length=1, max_length=128)


class TagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=50, min_length=1)


class TagResourceResponse(BaseModel):
    pass


class TagValue(
    RootModel[constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', max_length=256)]
):
    root: constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', max_length=256)


class Target(RootModel[constr(pattern=r'\(\?s\).\+', min_length=1, max_length=2048)]):
    root: constr(pattern=r'\(\?s\).\+', min_length=1, max_length=2048)


class TestArtifactsUrl(RootModel[constr(max_length=1000)]):
    root: constr(max_length=1000)


class TestConfigUrl(RootModel[constr(max_length=1000)]):
    root: constr(max_length=1000)


class ThumbnailName(RootModel[constr(max_length=256)]):
    root: constr(max_length=256)


class ThumbnailUrl(RootModel[constr(min_length=1, max_length=2000)]):
    root: constr(min_length=1, max_length=2000)


class TotalNumberOfJobs(RootModel[constr(max_length=1000)]):
    root: constr(max_length=1000)


class UnauthorizedException(RootModel[Any]):
    root: Any


class UntagResourceRequest(BaseModel):
    pass


class UntagResourceResponse(BaseModel):
    pass


class UpdateBranchRequest(BaseModel):
    backendEnvironmentArn: Optional[BackendEnvironmentArn] = None
    basicAuthCredentials: Optional[BasicAuthCredentials] = None
    buildSpec: Optional[BuildSpec] = None
    description: Optional[Description] = None
    displayName: Optional[DisplayName] = None
    enableAutoBuild: Optional[EnableAutoBuild] = None
    enableBasicAuth: Optional[EnableBasicAuth] = None
    enableNotification: Optional[EnableNotification] = None
    enablePerformanceMode: Optional[EnablePerformanceMode] = None
    enablePullRequestPreview: Optional[EnablePullRequestPreview] = None
    environmentVariables: Optional[EnvironmentVariables] = None
    framework: Optional[Framework] = None
    pullRequestEnvironmentName: Optional[PullRequestEnvironmentName] = None
    stage: Optional[Stage] = None
    ttl: Optional[TTL] = None


class UpdateDomainAssociationRequest(BaseModel):
    autoSubDomainCreationPatterns: Optional[AutoSubDomainCreationPatterns] = None
    autoSubDomainIAMRole: Optional[AutoSubDomainIAMRole] = None
    enableAutoSubDomain: Optional[EnableAutoSubDomain] = None
    subDomainSettings: Optional[SubDomainSettings] = None


class UpdateTime(RootModel[datetime]):
    root: datetime


class UpdateWebhookRequest(BaseModel):
    branchName: Optional[BranchName] = None
    description: Optional[Description] = None


class UploadUrl(RootModel[constr(max_length=1000)]):
    root: constr(max_length=1000)


class Verified(RootModel[bool]):
    root: bool


class WebhookArn(RootModel[constr(max_length=1000)]):
    root: constr(max_length=1000)


class WebhookId(RootModel[constr(pattern=r'\(\?s\).*', max_length=255)]):
    root: constr(pattern=r'\(\?s\).*', max_length=255)


class WebhookUrl(RootModel[constr(max_length=1000)]):
    root: constr(max_length=1000)


class AutoBranchCreationConfig(BaseModel):
    basicAuthCredentials: Optional[BasicAuthCredentials] = None
    buildSpec: Optional[BuildSpec] = None
    enableAutoBuild: Optional[EnableAutoBuild] = None
    enableBasicAuth: Optional[EnableBasicAuth] = None
    enablePerformanceMode: Optional[EnablePerformanceMode] = None
    enablePullRequestPreview: Optional[EnablePullRequestPreview] = None
    environmentVariables: Optional[EnvironmentVariables] = None
    framework: Optional[Framework] = None
    pullRequestEnvironmentName: Optional[PullRequestEnvironmentName] = None
    stage: Optional[Stage] = None


class AppsAppIdAccesslogsPostRequest(BaseModel):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    domainName: constr(
        pattern=r'^(((?!-)[A-Za-z0-9-]{0,62}[A-Za-z0-9])\.)+((?!-)[A-Za-z0-9-]{1,62}[A-Za-z0-9])(\.)?$',
        max_length=64,
    ) = Field(..., description=' The name of the domain. ')
    endTime: Optional[datetime] = Field(
        None,
        description=' The time at which the logs should end. The time range specified is inclusive of the end time. ',
    )
    startTime: Optional[datetime] = Field(
        None,
        description=' The time at which the logs should start. The time range specified is inclusive of the start time. ',
    )


class AppsAppIdBackendenvironmentsPostRequest(BaseModel):
    deploymentArtifacts: Optional[
        constr(pattern=r'\(\?s\).\+', min_length=1, max_length=1000)
    ] = Field(None, description=' The name of deployment artifacts. ')
    environmentName: constr(pattern=r'\(\?s\).\+', min_length=1, max_length=255) = (
        Field(..., description=' The name for the backend environment. ')
    )
    stackName: Optional[constr(pattern=r'\(\?s\).\+', min_length=1, max_length=255)] = (
        Field(
            None,
            description=' The AWS CloudFormation stack name of a backend environment. ',
        )
    )


class AppsAppIdBranchesPostRequest(BaseModel):
    backendEnvironmentArn: Optional[
        constr(pattern=r'\(\?s\).*', min_length=0, max_length=1000)
    ] = Field(
        None,
        description=' The Amazon Resource Name (ARN) for a backend environment that is part of an Amplify app. ',
    )
    basicAuthCredentials: Optional[SecretStr] = Field(
        None,
        description=' The basic authorization credentials for the branch. You must base64-encode the authorization credentials and provide them in the format <code>user:password</code>.',
    )
    branchName: constr(pattern=r'\(\?s\).\+', min_length=1, max_length=255) = Field(
        ..., description=' The name for the branch. '
    )
    buildSpec: Optional[SecretStr] = Field(
        None,
        description=' The build specification (build spec) file for an Amplify app build. ',
    )
    description: Optional[constr(pattern=r'\(\?s\).*', max_length=1000)] = Field(
        None, description=' The description for the branch. '
    )
    displayName: Optional[constr(pattern=r'\(\?s\).*', max_length=255)] = Field(
        None,
        description=' The display name for a branch. This is used as the default domain prefix. ',
    )
    enableAutoBuild: Optional[bool] = Field(
        None, description=' Enables auto building for the branch. '
    )
    enableBasicAuth: Optional[bool] = Field(
        None, description=' Enables basic authorization for the branch. '
    )
    enableNotification: Optional[bool] = Field(
        None, description=' Enables notifications for the branch. '
    )
    enablePerformanceMode: Optional[bool] = Field(
        None,
        description='<p>Enables performance mode for the branch.</p> <p>Performance mode optimizes for faster hosting performance by keeping content cached at the edge for a longer interval. When performance mode is enabled, hosting configuration or code changes can take up to 10 minutes to roll out. </p>',
    )
    enablePullRequestPreview: Optional[bool] = Field(
        None, description=' Enables pull request previews for this branch. '
    )
    environmentVariables: Optional[Dict[str, EnvValue]] = Field(
        None, description=' The environment variables for the branch. '
    )
    framework: Optional[constr(pattern=r'\(\?s\).*', max_length=255)] = Field(
        None, description=' The framework for the branch. '
    )
    pullRequestEnvironmentName: Optional[
        constr(pattern=r'\(\?s\).*', max_length=20)
    ] = Field(None, description=' The Amplify environment name for the pull request. ')
    stage: Optional[Stage] = Field(
        None, description=' Describes the current stage for the branch. '
    )
    tags: Optional[Dict[str, TagValue]] = Field(
        None, description=' The tag for the branch. '
    )
    ttl: Optional[constr(pattern=r'\d*', min_length=0, max_length=32)] = Field(
        None, description=' The content Time to Live (TTL) for the website in seconds. '
    )


class AppsAppIdBranchesBranchNamePostRequest(BaseModel):
    backendEnvironmentArn: Optional[
        constr(pattern=r'\(\?s\).*', min_length=0, max_length=1000)
    ] = Field(
        None,
        description=' The Amazon Resource Name (ARN) for a backend environment that is part of an Amplify app. ',
    )
    basicAuthCredentials: Optional[SecretStr] = Field(
        None,
        description=' The basic authorization credentials for the branch. You must base64-encode the authorization credentials and provide them in the format <code>user:password</code>.',
    )
    buildSpec: Optional[SecretStr] = Field(
        None,
        description=' The build specification (build spec) file for an Amplify app build. ',
    )
    description: Optional[constr(pattern=r'\(\?s\).*', max_length=1000)] = Field(
        None, description=' The description for the branch. '
    )
    displayName: Optional[constr(pattern=r'\(\?s\).*', max_length=255)] = Field(
        None,
        description=' The display name for a branch. This is used as the default domain prefix. ',
    )
    enableAutoBuild: Optional[bool] = Field(
        None, description=' Enables auto building for the branch. '
    )
    enableBasicAuth: Optional[bool] = Field(
        None, description=' Enables basic authorization for the branch. '
    )
    enableNotification: Optional[bool] = Field(
        None, description=' Enables notifications for the branch. '
    )
    enablePerformanceMode: Optional[bool] = Field(
        None,
        description='<p>Enables performance mode for the branch.</p> <p>Performance mode optimizes for faster hosting performance by keeping content cached at the edge for a longer interval. When performance mode is enabled, hosting configuration or code changes can take up to 10 minutes to roll out. </p>',
    )
    enablePullRequestPreview: Optional[bool] = Field(
        None, description=' Enables pull request previews for this branch. '
    )
    environmentVariables: Optional[Dict[str, EnvValue]] = Field(
        None, description=' The environment variables for the branch. '
    )
    framework: Optional[constr(pattern=r'\(\?s\).*', max_length=255)] = Field(
        None, description=' The framework for the branch. '
    )
    pullRequestEnvironmentName: Optional[
        constr(pattern=r'\(\?s\).*', max_length=20)
    ] = Field(None, description=' The Amplify environment name for the pull request. ')
    stage: Optional[Stage] = Field(
        None, description=' Describes the current stage for the branch. '
    )
    ttl: Optional[constr(pattern=r'\d*', min_length=0, max_length=32)] = Field(
        None, description=' The content Time to Live (TTL) for the website in seconds. '
    )


class AppsAppIdBranchesBranchNameDeploymentsPostRequest(BaseModel):
    fileMap: Optional[Dict[str, MD5Hash]] = Field(
        None,
        description=' An optional file map that contains the file name as the key and the file content md5 hash as the value. If this argument is provided, the service will generate a unique upload URL per file. Otherwise, the service will only generate a single upload URL for the zipped files. ',
    )


class AppsAppIdBranchesBranchNameDeploymentsStartPostRequest(BaseModel):
    jobId: Optional[constr(pattern=r'[0-9]+', max_length=255)] = Field(
        None,
        description=' The job ID for this deployment, generated by the create deployment request. ',
    )
    sourceUrl: Optional[constr(pattern=r'\(\?s\).*', max_length=3000)] = Field(
        None,
        description=' The source URL for this deployment, used when calling start deployment without create deployment. The source URL can be any HTTP GET URL that is publicly accessible and downloads a single .zip file. ',
    )


class AppsAppIdBranchesBranchNameJobsPostRequest(BaseModel):
    commitId: Optional[constr(pattern=r'\(\?s\).*', max_length=255)] = Field(
        None,
        description=' The commit ID from a third-party repository provider for the job. ',
    )
    commitMessage: Optional[constr(pattern=r'\(\?s\).*', max_length=10000)] = Field(
        None,
        description=' The commit message from a third-party repository provider for the job. ',
    )
    commitTime: Optional[datetime] = Field(
        None, description=' The commit date and time for the job. '
    )
    jobId: Optional[constr(pattern=r'[0-9]+', max_length=255)] = Field(
        None,
        description=' The unique ID for an existing job. This is required if the value of <code>jobType</code> is <code>RETRY</code>. ',
    )
    jobReason: Optional[constr(pattern=r'\(\?s\).*', max_length=255)] = Field(
        None, description=' A descriptive reason for starting this job. '
    )
    jobType: JobType = Field(
        ...,
        description=' Describes the type for the job. The job type <code>RELEASE</code> starts a new job with the latest change from the specified branch. This value is available only for apps that are connected to a repository. The job type <code>RETRY</code> retries an existing job. If the job type value is <code>RETRY</code>, the <code>jobId</code> is also required. ',
    )


class AppsAppIdDomainsPostRequest(BaseModel):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    autoSubDomainCreationPatterns: Optional[List[AutoSubDomainCreationPattern]] = Field(
        None, description=' Sets the branch patterns for automatic subdomain creation. '
    )
    autoSubDomainIAMRole: Optional[
        constr(pattern=r'^$|^arn:aws:iam::\d{12}:role.+', max_length=1000)
    ] = Field(
        None,
        description=' The required AWS Identity and Access Management (IAM) service role for the Amazon Resource Name (ARN) for automatically creating subdomains. ',
    )
    domainName: constr(
        pattern=r'^(((?!-)[A-Za-z0-9-]{0,62}[A-Za-z0-9])\.)+((?!-)[A-Za-z0-9-]{1,62}[A-Za-z0-9])(\.)?$',
        max_length=64,
    ) = Field(..., description=' The domain name for the domain association. ')
    enableAutoSubDomain: Optional[bool] = Field(
        None, description=' Enables the automated creation of subdomains for branches. '
    )
    subDomainSettings: List[SubDomainSetting] = Field(
        ..., description=' The setting for the subdomain. ', max_length=500
    )


class AppsAppIdDomainsDomainNamePostRequest(BaseModel):
    autoSubDomainCreationPatterns: Optional[List[AutoSubDomainCreationPattern]] = Field(
        None, description=' Sets the branch patterns for automatic subdomain creation. '
    )
    autoSubDomainIAMRole: Optional[
        constr(pattern=r'^$|^arn:aws:iam::\d{12}:role.+', max_length=1000)
    ] = Field(
        None,
        description=' The required AWS Identity and Access Management (IAM) service role for the Amazon Resource Name (ARN) for automatically creating subdomains. ',
    )
    enableAutoSubDomain: Optional[bool] = Field(
        None, description=' Enables the automated creation of subdomains for branches. '
    )
    subDomainSettings: Optional[List[SubDomainSetting]] = Field(
        None, description=' Describes the settings for the subdomain. ', max_length=500
    )


class AppsAppIdWebhooksPostRequest(BaseModel):
    branchName: constr(pattern=r'\(\?s\).\+', min_length=1, max_length=255) = Field(
        ..., description=' The name for a branch that is part of an Amplify app. '
    )
    description: Optional[constr(pattern=r'\(\?s\).*', max_length=1000)] = Field(
        None, description=' The description for a webhook. '
    )


class TagsResourceArnPostRequest(BaseModel):
    tags: Dict[str, TagValue] = Field(
        ..., description=' The tags used to tag the resource. '
    )


class TagKeys(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=50, min_length=1)


class WebhooksWebhookIdPostRequest(BaseModel):
    branchName: Optional[
        constr(pattern=r'\(\?s\).\+', min_length=1, max_length=255)
    ] = Field(
        None, description=' The name for a branch that is part of an Amplify app. '
    )
    description: Optional[constr(pattern=r'\(\?s\).*', max_length=1000)] = Field(
        None, description=' The description for a webhook. '
    )


class Artifact(BaseModel):
    artifactFileName: ArtifactFileName
    artifactId: ArtifactId


class Artifacts(RootModel[List[Artifact]]):
    root: List[Artifact]


class BackendEnvironment(BaseModel):
    backendEnvironmentArn: BackendEnvironmentArn
    createTime: CreateTime
    deploymentArtifacts: Optional[DeploymentArtifacts] = None
    environmentName: EnvironmentName
    stackName: Optional[StackName] = None
    updateTime: UpdateTime


class BackendEnvironments(RootModel[List[BackendEnvironment]]):
    root: List[BackendEnvironment]


class CreateBackendEnvironmentRequest(BaseModel):
    deploymentArtifacts: Optional[DeploymentArtifacts] = None
    environmentName: EnvironmentName
    stackName: Optional[StackName] = None


class CreateBackendEnvironmentResult(BaseModel):
    backendEnvironment: BackendEnvironment


class CreateDomainAssociationRequest(BaseModel):
    autoSubDomainCreationPatterns: Optional[AutoSubDomainCreationPatterns] = None
    autoSubDomainIAMRole: Optional[AutoSubDomainIAMRole] = None
    domainName: DomainName
    enableAutoSubDomain: Optional[EnableAutoSubDomain] = None
    subDomainSettings: SubDomainSettings


class CreateWebhookRequest(BaseModel):
    branchName: BranchName
    description: Optional[Description] = None


class CustomRule(BaseModel):
    condition: Optional[Condition] = None
    source: Source
    status: Optional[Status] = None
    target: Target


class CustomRules(RootModel[List[CustomRule]]):
    root: List[CustomRule]


class DeleteBackendEnvironmentResult(BaseModel):
    backendEnvironment: BackendEnvironment


class FileMap(RootModel[Optional[Dict[str, MD5Hash]]]):
    root: Optional[Dict[str, MD5Hash]] = None


class FileUploadUrls(RootModel[Optional[Dict[str, UploadUrl]]]):
    root: Optional[Dict[str, UploadUrl]] = None


class GenerateAccessLogsRequest(BaseModel):
    domainName: DomainName
    endTime: Optional[EndTime] = None
    startTime: Optional[StartTime] = None


class GenerateAccessLogsResult(BaseModel):
    logUrl: Optional[LogUrl] = None


class GetBackendEnvironmentResult(BaseModel):
    backendEnvironment: BackendEnvironment


class JobSummary(BaseModel):
    commitId: CommitId
    commitMessage: CommitMessage
    commitTime: CommitTime
    endTime: Optional[EndTime] = None
    jobArn: JobArn
    jobId: JobId
    jobType: JobType
    startTime: StartTime
    status: JobStatus


class ListArtifactsResult(BaseModel):
    artifacts: Artifacts
    nextToken: Optional[NextToken] = None


class ListBackendEnvironmentsResult(BaseModel):
    backendEnvironments: BackendEnvironments
    nextToken: Optional[NextToken] = None


class ProductionBranch(BaseModel):
    branchName: Optional[BranchName] = None
    lastDeployTime: Optional[LastDeployTime] = None
    status: Optional[Status] = None
    thumbnailUrl: Optional[ThumbnailUrl] = None


class Screenshots(RootModel[Optional[Dict[str, ThumbnailUrl]]]):
    root: Optional[Dict[str, ThumbnailUrl]] = None


class StartDeploymentResult(BaseModel):
    jobSummary: JobSummary


class StartJobResult(BaseModel):
    jobSummary: JobSummary


class Step(BaseModel):
    artifactsUrl: Optional[ArtifactsUrl] = None
    context: Optional[Context] = None
    endTime: EndTime
    logUrl: Optional[LogUrl] = None
    screenshots: Optional[Screenshots] = None
    startTime: StartTime
    status: JobStatus
    statusReason: Optional[StatusReason] = None
    stepName: StepName
    testArtifactsUrl: Optional[TestArtifactsUrl] = None
    testConfigUrl: Optional[TestConfigUrl] = None


class Steps(RootModel[List[Step]]):
    root: List[Step]


class StopJobResult(BaseModel):
    jobSummary: JobSummary


class SubDomain(BaseModel):
    dnsRecord: DNSRecord
    subDomainSetting: SubDomainSetting
    verified: Verified


class SubDomains(RootModel[List[SubDomain]]):
    root: List[SubDomain] = Field(..., max_length=500)


class TagMap(RootModel[Optional[Dict[str, TagValue]]]):
    root: Optional[Dict[str, TagValue]] = None


class TagResourceRequest(BaseModel):
    tags: TagMap


class UpdateAppRequest(BaseModel):
    accessToken: Optional[AccessToken] = None
    autoBranchCreationConfig: Optional[AutoBranchCreationConfig] = None
    autoBranchCreationPatterns: Optional[AutoBranchCreationPatterns] = None
    basicAuthCredentials: Optional[BasicAuthCredentials] = None
    buildSpec: Optional[BuildSpec] = None
    customHeaders: Optional[CustomHeaders] = None
    customRules: Optional[CustomRules] = None
    description: Optional[Description] = None
    enableAutoBranchCreation: Optional[EnableAutoBranchCreation] = None
    enableBasicAuth: Optional[EnableBasicAuth] = None
    enableBranchAutoBuild: Optional[EnableAutoBuild] = None
    enableBranchAutoDeletion: Optional[EnableBranchAutoDeletion] = None
    environmentVariables: Optional[EnvironmentVariables] = None
    iamServiceRoleArn: Optional[ServiceRoleArn] = None
    name: Optional[Name] = None
    oauthToken: Optional[OauthToken] = None
    platform: Optional[Platform] = None
    repository: Optional[Repository] = None


class Webhook(BaseModel):
    branchName: BranchName
    createTime: CreateTime
    description: Description
    updateTime: UpdateTime
    webhookArn: WebhookArn
    webhookId: WebhookId
    webhookUrl: WebhookUrl


class Webhooks(RootModel[List[Webhook]]):
    root: List[Webhook]


class AppsPostRequest(BaseModel):
    accessToken: Optional[SecretStr] = Field(
        None,
        description='<p>The personal access token for a GitHub repository for an Amplify app. The personal access token is used to authorize access to a GitHub repository using the Amplify GitHub App. The token is not stored.</p> <p>Use <code>accessToken</code> for GitHub repositories only. To authorize access to a repository provider such as Bitbucket or CodeCommit, use <code>oauthToken</code>.</p> <p>You must specify either <code>accessToken</code> or <code>oauthToken</code> when you create a new app.</p> <p>Existing Amplify apps deployed from a GitHub repository using OAuth continue to work with CI/CD. However, we strongly recommend that you migrate these apps to use the GitHub App. For more information, see <a href="https://docs.aws.amazon.com/amplify/latest/UserGuide/setting-up-GitHub-access.html#migrating-to-github-app-auth">Migrating an existing OAuth app to the Amplify GitHub App</a> in the <i>Amplify User Guide</i> .</p>',
    )
    autoBranchCreationConfig: Optional[AutoBranchCreationConfig] = Field(
        None, description=' Describes the automated branch creation configuration. '
    )
    autoBranchCreationPatterns: Optional[List[AutoBranchCreationPattern]] = Field(
        None,
        description=' The automated branch creation glob patterns for an Amplify app. ',
    )
    basicAuthCredentials: Optional[SecretStr] = Field(
        None,
        description=' The credentials for basic authorization for an Amplify app. You must base64-encode the authorization credentials and provide them in the format <code>user:password</code>.',
    )
    buildSpec: Optional[SecretStr] = Field(
        None,
        description=' The build specification (build spec) file for an Amplify app build. ',
    )
    customHeaders: Optional[
        constr(pattern=r'\(\?s\).*', min_length=0, max_length=25000)
    ] = Field(None, description='The custom HTTP headers for an Amplify app.')
    customRules: Optional[List[CustomRule]] = Field(
        None, description=' The custom rewrite and redirect rules for an Amplify app. '
    )
    description: Optional[constr(pattern=r'\(\?s\).*', max_length=1000)] = Field(
        None, description=' The description for an Amplify app. '
    )
    enableAutoBranchCreation: Optional[bool] = Field(
        None, description=' Enables automated branch creation for an Amplify app. '
    )
    enableBasicAuth: Optional[bool] = Field(
        None,
        description=' Enables basic authorization for an Amplify app. This will apply to all branches that are part of this app. ',
    )
    enableBranchAutoBuild: Optional[bool] = Field(
        None, description=' Enables the auto building of branches for an Amplify app. '
    )
    enableBranchAutoDeletion: Optional[bool] = Field(
        None,
        description=' Automatically disconnects a branch in the Amplify Console when you delete a branch from your Git repository. ',
    )
    environmentVariables: Optional[Dict[str, EnvValue]] = Field(
        None, description=' The environment variables map for an Amplify app. '
    )
    iamServiceRoleArn: Optional[
        constr(pattern=r'\(\?s\).*', min_length=0, max_length=1000)
    ] = Field(
        None,
        description=' The AWS Identity and Access Management (IAM) service role for an Amplify app. ',
    )
    name: constr(pattern=r'\(\?s\).\+', min_length=1, max_length=255) = Field(
        ..., description=' The name for an Amplify app. '
    )
    oauthToken: Optional[SecretStr] = Field(
        None,
        description='<p>The OAuth token for a third-party source control system for an Amplify app. The OAuth token is used to create a webhook and a read-only deploy key using SSH cloning. The OAuth token is not stored.</p> <p>Use <code>oauthToken</code> for repository providers other than GitHub, such as Bitbucket or CodeCommit. To authorize access to GitHub as your repository provider, use <code>accessToken</code>.</p> <p>You must specify either <code>oauthToken</code> or <code>accessToken</code> when you create a new app.</p> <p>Existing Amplify apps deployed from a GitHub repository using OAuth continue to work with CI/CD. However, we strongly recommend that you migrate these apps to use the GitHub App. For more information, see <a href="https://docs.aws.amazon.com/amplify/latest/UserGuide/setting-up-GitHub-access.html#migrating-to-github-app-auth">Migrating an existing OAuth app to the Amplify GitHub App</a> in the <i>Amplify User Guide</i> .</p>',
    )
    platform: Optional[Platform] = Field(
        None,
        description=" The platform for the Amplify app. For a static app, set the platform type to <code>WEB</code>. For a dynamic server-side rendered (SSR) app, set the platform type to <code>WEB_COMPUTE</code>. For an app requiring Amplify Hosting's original SSR support only, set the platform type to <code>WEB_DYNAMIC</code>.",
    )
    repository: Optional[constr(pattern=r'\(\?s\).*', max_length=1000)] = Field(
        None, description=' The repository for an Amplify app. '
    )
    tags: Optional[Dict[str, TagValue]] = Field(
        None, description=' The tag for an Amplify app. '
    )


class AppsAppIdPostRequest(BaseModel):
    accessToken: Optional[SecretStr] = Field(
        None,
        description='<p>The personal access token for a GitHub repository for an Amplify app. The personal access token is used to authorize access to a GitHub repository using the Amplify GitHub App. The token is not stored.</p> <p>Use <code>accessToken</code> for GitHub repositories only. To authorize access to a repository provider such as Bitbucket or CodeCommit, use <code>oauthToken</code>.</p> <p>You must specify either <code>accessToken</code> or <code>oauthToken</code> when you update an app.</p> <p>Existing Amplify apps deployed from a GitHub repository using OAuth continue to work with CI/CD. However, we strongly recommend that you migrate these apps to use the GitHub App. For more information, see <a href="https://docs.aws.amazon.com/amplify/latest/UserGuide/setting-up-GitHub-access.html#migrating-to-github-app-auth">Migrating an existing OAuth app to the Amplify GitHub App</a> in the <i>Amplify User Guide</i> .</p>',
    )
    autoBranchCreationConfig: Optional[AutoBranchCreationConfig] = Field(
        None, description=' Describes the automated branch creation configuration. '
    )
    autoBranchCreationPatterns: Optional[List[AutoBranchCreationPattern]] = Field(
        None,
        description=' Describes the automated branch creation glob patterns for an Amplify app. ',
    )
    basicAuthCredentials: Optional[SecretStr] = Field(
        None,
        description=' The basic authorization credentials for an Amplify app. You must base64-encode the authorization credentials and provide them in the format <code>user:password</code>.',
    )
    buildSpec: Optional[SecretStr] = Field(
        None,
        description=' The build specification (build spec) file for an Amplify app build. ',
    )
    customHeaders: Optional[
        constr(pattern=r'\(\?s\).*', min_length=0, max_length=25000)
    ] = Field(None, description='The custom HTTP headers for an Amplify app.')
    customRules: Optional[List[CustomRule]] = Field(
        None, description=' The custom redirect and rewrite rules for an Amplify app. '
    )
    description: Optional[constr(pattern=r'\(\?s\).*', max_length=1000)] = Field(
        None, description=' The description for an Amplify app. '
    )
    enableAutoBranchCreation: Optional[bool] = Field(
        None, description=' Enables automated branch creation for an Amplify app. '
    )
    enableBasicAuth: Optional[bool] = Field(
        None, description=' Enables basic authorization for an Amplify app. '
    )
    enableBranchAutoBuild: Optional[bool] = Field(
        None, description=' Enables branch auto-building for an Amplify app. '
    )
    enableBranchAutoDeletion: Optional[bool] = Field(
        None,
        description=' Automatically disconnects a branch in the Amplify Console when you delete a branch from your Git repository. ',
    )
    environmentVariables: Optional[Dict[str, EnvValue]] = Field(
        None, description=' The environment variables for an Amplify app. '
    )
    iamServiceRoleArn: Optional[
        constr(pattern=r'\(\?s\).*', min_length=0, max_length=1000)
    ] = Field(
        None,
        description=' The AWS Identity and Access Management (IAM) service role for an Amplify app. ',
    )
    name: Optional[constr(pattern=r'\(\?s\).\+', min_length=1, max_length=255)] = Field(
        None, description=' The name for an Amplify app. '
    )
    oauthToken: Optional[SecretStr] = Field(
        None,
        description='<p>The OAuth token for a third-party source control system for an Amplify app. The OAuth token is used to create a webhook and a read-only deploy key using SSH cloning. The OAuth token is not stored.</p> <p>Use <code>oauthToken</code> for repository providers other than GitHub, such as Bitbucket or CodeCommit.</p> <p>To authorize access to GitHub as your repository provider, use <code>accessToken</code>.</p> <p>You must specify either <code>oauthToken</code> or <code>accessToken</code> when you update an app.</p> <p>Existing Amplify apps deployed from a GitHub repository using OAuth continue to work with CI/CD. However, we strongly recommend that you migrate these apps to use the GitHub App. For more information, see <a href="https://docs.aws.amazon.com/amplify/latest/UserGuide/setting-up-GitHub-access.html#migrating-to-github-app-auth">Migrating an existing OAuth app to the Amplify GitHub App</a> in the <i>Amplify User Guide</i> .</p>',
    )
    platform: Optional[Platform] = Field(
        None,
        description=" The platform for the Amplify app. For a static app, set the platform type to <code>WEB</code>. For a dynamic server-side rendered (SSR) app, set the platform type to <code>WEB_COMPUTE</code>. For an app requiring Amplify Hosting's original SSR support only, set the platform type to <code>WEB_DYNAMIC</code>.",
    )
    repository: Optional[constr(pattern=r'\(\?s\).*', max_length=1000)] = Field(
        None, description=' The name of the repository for an Amplify app '
    )


class App(BaseModel):
    appArn: AppArn
    appId: AppId
    autoBranchCreationConfig: Optional[AutoBranchCreationConfig] = None
    autoBranchCreationPatterns: Optional[AutoBranchCreationPatterns] = None
    basicAuthCredentials: Optional[BasicAuthCredentials] = None
    buildSpec: Optional[BuildSpec] = None
    createTime: CreateTime
    customHeaders: Optional[CustomHeaders] = None
    customRules: Optional[CustomRules] = None
    defaultDomain: DefaultDomain
    description: Description
    enableAutoBranchCreation: Optional[EnableAutoBranchCreation] = None
    enableBasicAuth: EnableBasicAuth
    enableBranchAutoBuild: EnableBranchAutoBuild
    enableBranchAutoDeletion: Optional[EnableBranchAutoDeletion] = None
    environmentVariables: EnvironmentVariables
    iamServiceRoleArn: Optional[ServiceRoleArn] = None
    name: Name
    platform: Platform
    productionBranch: Optional[ProductionBranch] = None
    repository: Repository
    repositoryCloneMethod: Optional[RepositoryCloneMethod] = None
    tags: Optional[TagMap] = None
    updateTime: UpdateTime


class Apps(RootModel[List[App]]):
    root: List[App]


class Branch(BaseModel):
    activeJobId: ActiveJobId
    associatedResources: Optional[AssociatedResources] = None
    backendEnvironmentArn: Optional[BackendEnvironmentArn] = None
    basicAuthCredentials: Optional[BasicAuthCredentials] = None
    branchArn: BranchArn
    branchName: BranchName
    buildSpec: Optional[BuildSpec] = None
    createTime: CreateTime
    customDomains: CustomDomains
    description: Description
    destinationBranch: Optional[BranchName] = None
    displayName: DisplayName
    enableAutoBuild: EnableAutoBuild
    enableBasicAuth: EnableBasicAuth
    enableNotification: EnableNotification
    enablePerformanceMode: Optional[EnablePerformanceMode] = None
    enablePullRequestPreview: EnablePullRequestPreview
    environmentVariables: EnvironmentVariables
    framework: Framework
    pullRequestEnvironmentName: Optional[PullRequestEnvironmentName] = None
    sourceBranch: Optional[BranchName] = None
    stage: Stage
    tags: Optional[TagMap] = None
    thumbnailUrl: Optional[ThumbnailUrl] = None
    totalNumberOfJobs: TotalNumberOfJobs
    ttl: TTL
    updateTime: UpdateTime


class Branches(RootModel[List[Branch]]):
    root: List[Branch] = Field(..., max_length=255)


class CreateAppRequest(BaseModel):
    accessToken: Optional[AccessToken] = None
    autoBranchCreationConfig: Optional[AutoBranchCreationConfig] = None
    autoBranchCreationPatterns: Optional[AutoBranchCreationPatterns] = None
    basicAuthCredentials: Optional[BasicAuthCredentials] = None
    buildSpec: Optional[BuildSpec] = None
    customHeaders: Optional[CustomHeaders] = None
    customRules: Optional[CustomRules] = None
    description: Optional[Description] = None
    enableAutoBranchCreation: Optional[EnableAutoBranchCreation] = None
    enableBasicAuth: Optional[EnableBasicAuth] = None
    enableBranchAutoBuild: Optional[EnableBranchAutoBuild] = None
    enableBranchAutoDeletion: Optional[EnableBranchAutoDeletion] = None
    environmentVariables: Optional[EnvironmentVariables] = None
    iamServiceRoleArn: Optional[ServiceRoleArn] = None
    name: Name
    oauthToken: Optional[OauthToken] = None
    platform: Optional[Platform] = None
    repository: Optional[Repository] = None
    tags: Optional[TagMap] = None


class CreateAppResult(BaseModel):
    app: App


class CreateBranchRequest(BaseModel):
    backendEnvironmentArn: Optional[BackendEnvironmentArn] = None
    basicAuthCredentials: Optional[BasicAuthCredentials] = None
    branchName: BranchName
    buildSpec: Optional[BuildSpec] = None
    description: Optional[Description] = None
    displayName: Optional[DisplayName] = None
    enableAutoBuild: Optional[EnableAutoBuild] = None
    enableBasicAuth: Optional[EnableBasicAuth] = None
    enableNotification: Optional[EnableNotification] = None
    enablePerformanceMode: Optional[EnablePerformanceMode] = None
    enablePullRequestPreview: Optional[EnablePullRequestPreview] = None
    environmentVariables: Optional[EnvironmentVariables] = None
    framework: Optional[Framework] = None
    pullRequestEnvironmentName: Optional[PullRequestEnvironmentName] = None
    stage: Optional[Stage] = None
    tags: Optional[TagMap] = None
    ttl: Optional[TTL] = None


class CreateBranchResult(BaseModel):
    branch: Branch


class CreateDeploymentRequest(BaseModel):
    fileMap: Optional[FileMap] = None


class CreateDeploymentResult(BaseModel):
    fileUploadUrls: FileUploadUrls
    jobId: Optional[JobId] = None
    zipUploadUrl: UploadUrl


class CreateWebhookResult(BaseModel):
    webhook: Webhook


class DeleteAppResult(BaseModel):
    app: App


class DeleteBranchResult(BaseModel):
    branch: Branch


class DeleteJobResult(BaseModel):
    jobSummary: JobSummary


class DeleteWebhookResult(BaseModel):
    webhook: Webhook


class DomainAssociation(BaseModel):
    autoSubDomainCreationPatterns: Optional[AutoSubDomainCreationPatterns] = None
    autoSubDomainIAMRole: Optional[AutoSubDomainIAMRole] = None
    certificateVerificationDNSRecord: Optional[CertificateVerificationDNSRecord] = None
    domainAssociationArn: DomainAssociationArn
    domainName: DomainName
    domainStatus: DomainStatus
    enableAutoSubDomain: EnableAutoSubDomain
    statusReason: StatusReason
    subDomains: SubDomains


class DomainAssociations(RootModel[List[DomainAssociation]]):
    root: List[DomainAssociation] = Field(..., max_length=255)


class GetAppResult(BaseModel):
    app: App


class GetBranchResult(BaseModel):
    branch: Branch


class GetDomainAssociationResult(BaseModel):
    domainAssociation: DomainAssociation


class GetWebhookResult(BaseModel):
    webhook: Webhook


class Job(BaseModel):
    steps: Steps
    summary: JobSummary


class JobSummaries(RootModel[List[JobSummary]]):
    root: List[JobSummary]


class ListAppsResult(BaseModel):
    apps: Apps
    nextToken: Optional[NextToken] = None


class ListBranchesResult(BaseModel):
    branches: Branches
    nextToken: Optional[NextToken] = None


class ListDomainAssociationsResult(BaseModel):
    domainAssociations: DomainAssociations
    nextToken: Optional[NextToken] = None


class ListJobsResult(BaseModel):
    jobSummaries: JobSummaries
    nextToken: Optional[NextToken] = None


class ListTagsForResourceResponse(BaseModel):
    tags: Optional[TagMap] = None


class ListWebhooksResult(BaseModel):
    nextToken: Optional[NextToken] = None
    webhooks: Webhooks


class UpdateAppResult(BaseModel):
    app: App


class UpdateBranchResult(BaseModel):
    branch: Branch


class UpdateDomainAssociationResult(BaseModel):
    domainAssociation: DomainAssociation


class UpdateWebhookResult(BaseModel):
    webhook: Webhook


class CreateDomainAssociationResult(BaseModel):
    domainAssociation: DomainAssociation


class DeleteDomainAssociationResult(BaseModel):
    domainAssociation: DomainAssociation


class GetJobResult(BaseModel):
    job: Job
