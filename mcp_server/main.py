# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T09:32:19+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity
from fastapi import Header, Path, Query
from pydantic import conint, constr

from models import (
    AppsAppIdAccesslogsPostRequest,
    AppsAppIdBackendenvironmentsPostRequest,
    AppsAppIdBranchesBranchNameDeploymentsPostRequest,
    AppsAppIdBranchesBranchNameDeploymentsStartPostRequest,
    AppsAppIdBranchesBranchNameJobsPostRequest,
    AppsAppIdBranchesBranchNamePostRequest,
    AppsAppIdBranchesPostRequest,
    AppsAppIdDomainsDomainNamePostRequest,
    AppsAppIdDomainsPostRequest,
    AppsAppIdPostRequest,
    AppsAppIdWebhooksPostRequest,
    AppsPostRequest,
    BadRequestException,
    CreateAppResult,
    CreateBackendEnvironmentResult,
    CreateBranchResult,
    CreateDeploymentResult,
    CreateDomainAssociationResult,
    CreateWebhookResult,
    DeleteAppResult,
    DeleteBackendEnvironmentResult,
    DeleteBranchResult,
    DeleteDomainAssociationResult,
    DeleteJobResult,
    DeleteWebhookResult,
    DependentServiceFailureException,
    GenerateAccessLogsResult,
    GetAppResult,
    GetArtifactUrlResult,
    GetBackendEnvironmentResult,
    GetBranchResult,
    GetDomainAssociationResult,
    GetJobResult,
    GetWebhookResult,
    InternalFailureException,
    LimitExceededException,
    ListAppsResult,
    ListArtifactsResult,
    ListBackendEnvironmentsResult,
    ListBranchesResult,
    ListDomainAssociationsResult,
    ListJobsResult,
    ListTagsForResourceResponse,
    ListWebhooksResult,
    NotFoundException,
    ResourceNotFoundException,
    StartDeploymentResult,
    StartJobResult,
    StopJobResult,
    TagKeys,
    TagResourceResponse,
    TagsResourceArnPostRequest,
    UnauthorizedException,
    UntagResourceResponse,
    UpdateAppResult,
    UpdateBranchResult,
    UpdateDomainAssociationResult,
    UpdateWebhookResult,
    WebhooksWebhookIdPostRequest,
)

app = MCPProxy(
    contact={
        'email': 'mike.ralphson@gmail.com',
        'name': 'Mike Ralphson',
        'url': 'https://github.com/mermade/aws2openapi',
        'x-twitter': 'PermittedSoc',
    },
    description='Amplify enables developers to develop and deploy cloud-powered mobile and web apps. The Amplify Console provides a continuous delivery and hosting service for web applications. For more information, see the <a href="https://docs.aws.amazon.com/amplify/latest/userguide/welcome.html">Amplify Console User Guide</a>. The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the <a href="https://docs.amplify.aws/">Amplify Framework.</a> ',
    license={'name': 'Apache 2.0 License', 'url': 'http://www.apache.org/licenses/'},
    termsOfService='https://aws.amazon.com/service-terms/',
    title='AWS Amplify',
    version='2017-07-25',
    servers=[
        {
            'description': 'The Amplify multi-region endpoint',
            'url': 'http://amplify.{region}.amazonaws.com',
            'variables': {
                'region': {
                    'default': 'us-east-1',
                    'description': 'The AWS region',
                    'enum': [
                        'us-east-1',
                        'us-east-2',
                        'us-west-1',
                        'us-west-2',
                        'us-gov-west-1',
                        'us-gov-east-1',
                        'ca-central-1',
                        'eu-north-1',
                        'eu-west-1',
                        'eu-west-2',
                        'eu-west-3',
                        'eu-central-1',
                        'eu-south-1',
                        'af-south-1',
                        'ap-northeast-1',
                        'ap-northeast-2',
                        'ap-northeast-3',
                        'ap-southeast-1',
                        'ap-southeast-2',
                        'ap-east-1',
                        'ap-south-1',
                        'sa-east-1',
                        'me-south-1',
                    ],
                }
            },
        },
        {
            'description': 'The Amplify multi-region endpoint',
            'url': 'https://amplify.{region}.amazonaws.com',
            'variables': {
                'region': {
                    'default': 'us-east-1',
                    'description': 'The AWS region',
                    'enum': [
                        'us-east-1',
                        'us-east-2',
                        'us-west-1',
                        'us-west-2',
                        'us-gov-west-1',
                        'us-gov-east-1',
                        'ca-central-1',
                        'eu-north-1',
                        'eu-west-1',
                        'eu-west-2',
                        'eu-west-3',
                        'eu-central-1',
                        'eu-south-1',
                        'af-south-1',
                        'ap-northeast-1',
                        'ap-northeast-2',
                        'ap-northeast-3',
                        'ap-southeast-1',
                        'ap-southeast-2',
                        'ap-east-1',
                        'ap-south-1',
                        'sa-east-1',
                        'me-south-1',
                    ],
                }
            },
        },
        {
            'description': 'The Amplify endpoint for China (Beijing) and China (Ningxia)',
            'url': 'http://amplify.{region}.amazonaws.com.cn',
            'variables': {
                'region': {
                    'default': 'cn-north-1',
                    'description': 'The AWS region',
                    'enum': ['cn-north-1', 'cn-northwest-1'],
                }
            },
        },
        {
            'description': 'The Amplify endpoint for China (Beijing) and China (Ningxia)',
            'url': 'https://amplify.{region}.amazonaws.com.cn',
            'variables': {
                'region': {
                    'default': 'cn-north-1',
                    'description': 'The AWS region',
                    'enum': ['cn-north-1', 'cn-northwest-1'],
                }
            },
        },
    ],
)


@app.get(
    '/apps',
    description="""  Returns a list of the existing Amplify apps.  """,
    tags=['backend_environment_control', 'access_logging_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_apps(
    next_token: Optional[constr(pattern=r'\(\?s\).*', max_length=2000)] = Query(
        None, alias='nextToken'
    ),
    max_results: Optional[conint(ge=0, le=100)] = Query(None, alias='maxResults'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/apps',
    description="""  Creates a new Amplify app.  """,
    tags=['deployment_control', 'access_logging_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_app(
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AppsPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/apps/{appId}',
    description="""  Deletes an existing Amplify app specified by an app ID.  """,
    tags=[
        'application_management',
        'backend_environment_control',
        'deployment_control',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_app(
    app_id: constr(pattern=r'd[a-z0-9]+', min_length=1, max_length=20) = Path(
        ..., alias='appId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/apps/{appId}',
    description="""  Returns an existing Amplify app by appID.  """,
    tags=['backend_environment_control', 'access_logging_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_app(
    app_id: constr(pattern=r'd[a-z0-9]+', min_length=1, max_length=20) = Path(
        ..., alias='appId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/apps/{appId}',
    description="""  Updates an existing Amplify app.  """,
    tags=['application_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_app(
    app_id: constr(pattern=r'd[a-z0-9]+', min_length=1, max_length=20) = Path(
        ..., alias='appId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AppsAppIdPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/apps/{appId}/accesslogs',
    description="""  Returns the website access logs for a specific time range using a presigned URL.  """,
    tags=['access_logging_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def generate_access_logs(
    app_id: constr(pattern=r'd[a-z0-9]+', min_length=1, max_length=20) = Path(
        ..., alias='appId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AppsAppIdAccesslogsPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/apps/{appId}/backendenvironments',
    description="""  Lists the backend environments for an Amplify app.  """,
    tags=['backend_environment_control'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_backend_environments(
    app_id: constr(pattern=r'd[a-z0-9]+', min_length=1, max_length=20) = Path(
        ..., alias='appId'
    ),
    environment_name: Optional[
        constr(pattern=r'\(\?s\).\+', min_length=1, max_length=255)
    ] = Query(None, alias='environmentName'),
    next_token: Optional[constr(pattern=r'\(\?s\).*', max_length=2000)] = Query(
        None, alias='nextToken'
    ),
    max_results: Optional[conint(ge=0, le=100)] = Query(None, alias='maxResults'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/apps/{appId}/backendenvironments',
    description="""  Creates a new backend environment for an Amplify app.  """,
    tags=['backend_environment_control'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_backend_environment(
    app_id: constr(pattern=r'd[a-z0-9]+', min_length=1, max_length=20) = Path(
        ..., alias='appId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AppsAppIdBackendenvironmentsPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/apps/{appId}/backendenvironments/{environmentName}',
    description="""  Deletes a backend environment for an Amplify app.  """,
    tags=['backend_environment_control', 'application_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_backend_environment(
    app_id: constr(pattern=r'd[a-z0-9]+', min_length=1, max_length=20) = Path(
        ..., alias='appId'
    ),
    environment_name: constr(
        pattern=r'\(\?s\).\+', min_length=1, max_length=255
    ) = Path(..., alias='environmentName'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/apps/{appId}/backendenvironments/{environmentName}',
    description="""  Returns a backend environment for an Amplify app.  """,
    tags=['backend_environment_control'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_backend_environment(
    app_id: constr(pattern=r'd[a-z0-9]+', min_length=1, max_length=20) = Path(
        ..., alias='appId'
    ),
    environment_name: constr(
        pattern=r'\(\?s\).\+', min_length=1, max_length=255
    ) = Path(..., alias='environmentName'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/apps/{appId}/branches',
    description="""  Lists the branches of an Amplify app.  """,
    tags=['application_management', 'backend_environment_control'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_branches(
    app_id: constr(pattern=r'd[a-z0-9]+', min_length=1, max_length=20) = Path(
        ..., alias='appId'
    ),
    next_token: Optional[constr(pattern=r'\(\?s\).*', max_length=2000)] = Query(
        None, alias='nextToken'
    ),
    max_results: Optional[conint(ge=0, le=100)] = Query(None, alias='maxResults'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/apps/{appId}/branches',
    description="""  Creates a new branch for an Amplify app.  """,
    tags=['application_branch_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_branch(
    app_id: constr(pattern=r'd[a-z0-9]+', min_length=1, max_length=20) = Path(
        ..., alias='appId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AppsAppIdBranchesPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/apps/{appId}/branches/{branchName}',
    description="""  Deletes a branch for an Amplify app.  """,
    tags=['application_branch_management', 'deployment_control'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_branch(
    app_id: constr(pattern=r'd[a-z0-9]+', min_length=1, max_length=20) = Path(
        ..., alias='appId'
    ),
    branch_name: constr(pattern=r'\(\?s\).\+', min_length=1, max_length=255) = Path(
        ..., alias='branchName'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/apps/{appId}/branches/{branchName}',
    description="""  Returns a branch for an Amplify app.  """,
    tags=['application_branch_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_branch(
    app_id: constr(pattern=r'd[a-z0-9]+', min_length=1, max_length=20) = Path(
        ..., alias='appId'
    ),
    branch_name: constr(pattern=r'\(\?s\).\+', min_length=1, max_length=255) = Path(
        ..., alias='branchName'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/apps/{appId}/branches/{branchName}',
    description="""  Updates a branch for an Amplify app.  """,
    tags=['application_branch_management', 'backend_environment_control'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_branch(
    app_id: constr(pattern=r'd[a-z0-9]+', min_length=1, max_length=20) = Path(
        ..., alias='appId'
    ),
    branch_name: constr(pattern=r'\(\?s\).\+', min_length=1, max_length=255) = Path(
        ..., alias='branchName'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AppsAppIdBranchesBranchNamePostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/apps/{appId}/branches/{branchName}/deployments',
    description="""  Creates a deployment for a manually deployed Amplify app. Manually deployed apps are not connected to a repository.  """,
    tags=['application_branch_management', 'deployment_control'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_deployment(
    app_id: constr(pattern=r'd[a-z0-9]+', min_length=1, max_length=20) = Path(
        ..., alias='appId'
    ),
    branch_name: constr(pattern=r'\(\?s\).\+', min_length=1, max_length=255) = Path(
        ..., alias='branchName'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AppsAppIdBranchesBranchNameDeploymentsPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/apps/{appId}/branches/{branchName}/deployments/start',
    description="""  Starts a deployment for a manually deployed app. Manually deployed apps are not connected to a repository.  """,
    tags=['application_branch_management', 'deployment_control'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def start_deployment(
    app_id: constr(pattern=r'd[a-z0-9]+', min_length=1, max_length=20) = Path(
        ..., alias='appId'
    ),
    branch_name: constr(pattern=r'\(\?s\).\+', min_length=1, max_length=255) = Path(
        ..., alias='branchName'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AppsAppIdBranchesBranchNameDeploymentsStartPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/apps/{appId}/branches/{branchName}/jobs',
    description="""  Lists the jobs for a branch of an Amplify app.  """,
    tags=[
        'application_branch_management',
        'backend_environment_control',
        'deployment_control',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_jobs(
    app_id: constr(pattern=r'd[a-z0-9]+', min_length=1, max_length=20) = Path(
        ..., alias='appId'
    ),
    branch_name: constr(pattern=r'\(\?s\).\+', min_length=1, max_length=255) = Path(
        ..., alias='branchName'
    ),
    next_token: Optional[constr(pattern=r'\(\?s\).*', max_length=2000)] = Query(
        None, alias='nextToken'
    ),
    max_results: Optional[conint(ge=0, le=100)] = Query(None, alias='maxResults'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/apps/{appId}/branches/{branchName}/jobs',
    description="""  Starts a new job for a branch of an Amplify app.  """,
    tags=['application_branch_management', 'job_control'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def start_job(
    app_id: constr(pattern=r'd[a-z0-9]+', min_length=1, max_length=20) = Path(
        ..., alias='appId'
    ),
    branch_name: constr(pattern=r'\(\?s\).\+', min_length=1, max_length=255) = Path(
        ..., alias='branchName'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AppsAppIdBranchesBranchNameJobsPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/apps/{appId}/branches/{branchName}/jobs/{jobId}',
    description="""  Deletes a job for a branch of an Amplify app.  """,
    tags=['application_branch_management', 'job_control'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_job(
    app_id: constr(pattern=r'd[a-z0-9]+', min_length=1, max_length=20) = Path(
        ..., alias='appId'
    ),
    branch_name: constr(pattern=r'\(\?s\).\+', min_length=1, max_length=255) = Path(
        ..., alias='branchName'
    ),
    job_id: constr(pattern=r'[0-9]+', max_length=255) = Path(..., alias='jobId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/apps/{appId}/branches/{branchName}/jobs/{jobId}',
    description="""  Returns a job for a branch of an Amplify app.  """,
    tags=['application_branch_management', 'job_control', 'deployment_control'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_job(
    app_id: constr(pattern=r'd[a-z0-9]+', min_length=1, max_length=20) = Path(
        ..., alias='appId'
    ),
    branch_name: constr(pattern=r'\(\?s\).\+', min_length=1, max_length=255) = Path(
        ..., alias='branchName'
    ),
    job_id: constr(pattern=r'[0-9]+', max_length=255) = Path(..., alias='jobId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/apps/{appId}/branches/{branchName}/jobs/{jobId}/artifacts',
    description="""  Returns a list of artifacts for a specified app, branch, and job.  """,
    tags=['application_branch_management', 'job_control'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_artifacts(
    app_id: constr(pattern=r'd[a-z0-9]+', min_length=1, max_length=20) = Path(
        ..., alias='appId'
    ),
    branch_name: constr(pattern=r'\(\?s\).\+', min_length=1, max_length=255) = Path(
        ..., alias='branchName'
    ),
    job_id: constr(pattern=r'[0-9]+', max_length=255) = Path(..., alias='jobId'),
    next_token: Optional[constr(pattern=r'\(\?s\).*', max_length=2000)] = Query(
        None, alias='nextToken'
    ),
    max_results: Optional[conint(ge=0, le=100)] = Query(None, alias='maxResults'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/apps/{appId}/branches/{branchName}/jobs/{jobId}/stop',
    description="""  Stops a job that is in progress for a branch of an Amplify app.  """,
    tags=['application_branch_management', 'job_control', 'deployment_control'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def stop_job(
    app_id: constr(pattern=r'd[a-z0-9]+', min_length=1, max_length=20) = Path(
        ..., alias='appId'
    ),
    branch_name: constr(pattern=r'\(\?s\).\+', min_length=1, max_length=255) = Path(
        ..., alias='branchName'
    ),
    job_id: constr(pattern=r'[0-9]+', max_length=255) = Path(..., alias='jobId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/apps/{appId}/domains',
    description="""  Returns the domain associations for an Amplify app.  """,
    tags=['application_management', 'backend_environment_control'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_domain_associations(
    app_id: constr(pattern=r'd[a-z0-9]+', min_length=1, max_length=20) = Path(
        ..., alias='appId'
    ),
    next_token: Optional[constr(pattern=r'\(\?s\).*', max_length=2000)] = Query(
        None, alias='nextToken'
    ),
    max_results: Optional[conint(ge=0, le=100)] = Query(None, alias='maxResults'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/apps/{appId}/domains',
    description="""  Creates a new domain association for an Amplify app. This action associates a custom domain with the Amplify app  """,
    tags=['application_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_domain_association(
    app_id: constr(pattern=r'd[a-z0-9]+', min_length=1, max_length=20) = Path(
        ..., alias='appId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AppsAppIdDomainsPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/apps/{appId}/domains/{domainName}',
    description="""  Deletes a domain association for an Amplify app.  """,
    tags=['domain_association_control'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_domain_association(
    app_id: constr(pattern=r'd[a-z0-9]+', min_length=1, max_length=20) = Path(
        ..., alias='appId'
    ),
    domain_name: constr(
        pattern=r'^(((?!-)[A-Za-z0-9-]{0,62}[A-Za-z0-9])\.)+((?!-)[A-Za-z0-9-]{1,62}[A-Za-z0-9])(\.)?$',
        max_length=64,
    ) = Path(..., alias='domainName'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/apps/{appId}/domains/{domainName}',
    description="""  Returns the domain information for an Amplify app.  """,
    tags=['domain_association_control'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_domain_association(
    app_id: constr(pattern=r'd[a-z0-9]+', min_length=1, max_length=20) = Path(
        ..., alias='appId'
    ),
    domain_name: constr(
        pattern=r'^(((?!-)[A-Za-z0-9-]{0,62}[A-Za-z0-9])\.)+((?!-)[A-Za-z0-9-]{1,62}[A-Za-z0-9])(\.)?$',
        max_length=64,
    ) = Path(..., alias='domainName'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/apps/{appId}/domains/{domainName}',
    description="""  Creates a new domain association for an Amplify app. """,
    tags=['domain_association_control', 'application_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_domain_association(
    app_id: constr(pattern=r'd[a-z0-9]+', min_length=1, max_length=20) = Path(
        ..., alias='appId'
    ),
    domain_name: constr(
        pattern=r'^(((?!-)[A-Za-z0-9-]{0,62}[A-Za-z0-9])\.)+((?!-)[A-Za-z0-9-]{1,62}[A-Za-z0-9])(\.)?$',
        max_length=64,
    ) = Path(..., alias='domainName'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AppsAppIdDomainsDomainNamePostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/apps/{appId}/webhooks',
    description="""  Returns a list of webhooks for an Amplify app.  """,
    tags=['application_management', 'backend_environment_control'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_webhooks(
    app_id: constr(pattern=r'd[a-z0-9]+', min_length=1, max_length=20) = Path(
        ..., alias='appId'
    ),
    next_token: Optional[constr(pattern=r'\(\?s\).*', max_length=2000)] = Query(
        None, alias='nextToken'
    ),
    max_results: Optional[conint(ge=0, le=100)] = Query(None, alias='maxResults'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/apps/{appId}/webhooks',
    description="""  Creates a new webhook on an Amplify app.  """,
    tags=['application_management', 'webhook_control'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_webhook(
    app_id: constr(pattern=r'd[a-z0-9]+', min_length=1, max_length=20) = Path(
        ..., alias='appId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AppsAppIdWebhooksPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/artifacts/{artifactId}',
    description="""  Returns the artifact info that corresponds to an artifact id.  """,
    tags=['artifact_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_artifact_url(
    artifact_id: constr(pattern=r'\(\?s\).*', max_length=255) = Path(
        ..., alias='artifactId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/tags/{resourceArn}',
    description="""  Returns a list of tags for a specified Amazon Resource Name (ARN).  """,
    tags=[
        'backend_environment_control',
        'deployment_control',
        'resource_tag_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_tags_for_resource(
    resource_arn: constr(
        pattern=r'^arn:aws:amplify:.*', min_length=0, max_length=2048
    ) = Path(..., alias='resourceArn'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/tags/{resourceArn}',
    description="""  Tags the resource with a tag key and value.  """,
    tags=['resource_tag_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def tag_resource(
    resource_arn: constr(
        pattern=r'^arn:aws:amplify:.*', min_length=0, max_length=2048
    ) = Path(..., alias='resourceArn'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: TagsResourceArnPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/tags/{resourceArn}#tagKeys',
    description="""  Untags a resource with a specified Amazon Resource Name (ARN).  """,
    tags=['resource_tag_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def untag_resource(
    resource_arn: constr(
        pattern=r'^arn:aws:amplify:.*', min_length=0, max_length=2048
    ) = Path(..., alias='resourceArn'),
    tag_keys: TagKeys = Query(..., alias='tagKeys'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/webhooks/{webhookId}',
    description="""  Deletes a webhook.  """,
    tags=['webhook_control'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_webhook(
    webhook_id: constr(pattern=r'\(\?s\).*', max_length=255) = Path(
        ..., alias='webhookId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/webhooks/{webhookId}',
    description="""  Returns the webhook information that corresponds to a specified webhook ID.  """,
    tags=['webhook_control'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_webhook(
    webhook_id: constr(pattern=r'\(\?s\).*', max_length=255) = Path(
        ..., alias='webhookId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/webhooks/{webhookId}',
    description="""  Updates a webhook.  """,
    tags=['webhook_control'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_webhook(
    webhook_id: constr(pattern=r'\(\?s\).*', max_length=255) = Path(
        ..., alias='webhookId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: WebhooksWebhookIdPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
